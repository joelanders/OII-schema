FORMAT: 1A
HOST: https://api.openintegrity.org/

# Open Integrity API documentation.

Should the main categories be Command/Query ?

## Events (Command)

## Entities (Query)


# Group Events

## Generic Events [/events]

### Create a new Generic Event [POST]

+ Request (application/json)

    + Attributes (Event)

+ Response 201 (application/json)

    + Headers

            Location: /events/2

    + Attributes (Event)

## Page Events [/events/page/]

### Create a new Page Content Event [POST]

+ Request (application/json)

    + Attributes (PageContentEvent)

+ Response 201 (application/json)

    + Headers

            Location: /events/2

    + Attributes (PageContentEvent)

# Group Entities

## Projects Collection [/projects]

### List All Projects [GET]

+ Response 200 (application/json)

    + Attributes (Projects)

### Create a New Project [POST]

You may create a new project using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

    + Attributes (Project)

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Attributes (Project)

## Modify Project [/projects/{project_id}]

### Get Project [GET]

+ Parameters

    + project_id (string) - ID of the Project in the form of a string

+ Request A search limited to one result
    + Parameters
        + project_id: signal

+ Response 200 (application/json)

    + Headers

            Location: /questions/2

    + Attributes (Project)



# Data Structures

# Projects

 - `projects` (array[Project])


## Sample

- `signal` ()
 - `id`: signal
 - `name`: Signal

# Project

> Should inherit from Entity but inheritance seems broken https://github.com/apiaryio/drafter/issues/366

A top level placeholder for a number of software projects that accomplish similar functions and are owned by the same person/organisation.

## Properties

 - `id` (idProject) - Project Identifier
 - `instances` (Instance) - Instance

# idProject (string)

# Instance

> Should inherit from (Entity)

Instance of the project for a particular OS, Audience

## Properties

 - `id` (string) - Instance Identifier

# Package

> Should inherit from (Entity)

[spdx:Package] A Package represents a collection of software files that are delivered as a single functional component.

## Properties

- `id` (idPackage) - Package Identifier

# idPackage (string)

# Repository

> Should inherit from (Entity)

## Properties

- `id` (idRepository) - Repository URI

# idRepository (string)

> Should inherit from (Resource)

# Page (Entity)

A collected web page.

# idPage (string)

# Event

 - `entity` (Entity, required) - Entity
 - `attribute` (Attribute, required) - Attribute
 - `value` (Value, required) - Value
 - `context` (Context, required) - Context

# PageContentEvent

> Should inherit from (Event)

## Properties

 - `entity` (idPage) - Page URL
 - `attribute` (hasPageContent) - has Page Content
 - `value` (Content) - Page Content (in Markdown)
 - `context` (Context) - Metadata

# hasPageContent (object)

> Should inherit from (Property)

## Properties

- `property`: PageContent (string, fixed) - Name of property.
- `type` : propertyCreated (string, fixed) - Type of property

# Content (object)

- `hash` (string) - Checksum of the page
- `content` (string) - Content of the page

# Entity (Resource)

 - `id` (string) - Entity Identifier

# Attribute (Resource)

# Value (Resource)

# Context (Resource)

# Resource (object)

## Properties

 - `id` (string) - Resource Id
