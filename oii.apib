FORMAT: 1A
HOST: https://api.openintegrity.org/

# Open Integrity API documentation.

Open Integrity uses an Event Sourcing approach combined with a data structure that is close to a quad approach (in fact to a 5-tuple approach as used in Datomic) for top level entities and closer to a document DB (with no relational integrity, with eventual consistency and multi-version concurrency control) approach for agent data and human submitted claims.

The 3 key entities in the data model are:
 - `Project`: Represents the name people use to refer to applications. For example `signal` or `skype`. This will also be used to refer to OS projects, such as `osx`, Hardware projects such as `android-phone` and Infrastructure projects such as `gsm-network`.
 - `Instance`: A particular implementation for a given OS or audience. For example `signal-android` or `skype-tomskype`. This will also be used to refer to OS major releases such as `osx-10`, hardware models `nexus-5x`, and Infrastructure deployments such as `gsm-network-o2-france`.
 - `Package`: A particular release of a software component such as `signal-android-3.9.0` or `openssl-1.0.0h`. This will also be used to refer to OS builds `osx-10.11.5`, hardware builds such as `nexus-5x-MTC19Z` and Infrastructure build such as `gsm-network-o2-france-201606`.

![](diagram.png)

In order to model the fact that software might have different capabilities or properties depending on their configuration or the set of features used we use the following approach:
 - `Configuration`: A given `Package` can have any number of configurations. For example `telegram-endtoend` or `conversations-endtoend`.
 - `Feature`: Configurations are defined by a set of features. Such as `conversations-omemo` or `conversations-otr`. Feature might implement a specification.
 - `Specification`: A specific protocol, or standard that defines how a feature should be implemented. For example `omemo`, `otr`.

In order to model legal or policy documents, the `Document` entity will be used and allow statements/claims/terms to be added. `Page` refers to the actual text of the `Document`. A more detailed model which allows linking paragraphs to terms might be later adopted.

## Events (Command)

Events allow API clients to submit new data to Open Integrity. There are 2 main type of events:

  - **Relation Events**: Relation Events express a relation between to entities using their `id`s. The entities themselves don't need to be created before hand. The `id` should be human readable and use lowercase and dashes. Coining unique IDs for entities is a difficult problem which we won't address in the MVP.
  - **Metric Events**: Metric Events add data to an entity. They can be submitted by automated agents or humans. They can range from quantitative measurements to qualitative claims. Some can enforce a particular schema but all will have a "fallback" to allow a qualitative claim to be made about any entity.

For instance, in order to add a new Package dependency to a top level Package associate to a project (for instance to `signal-android-3.9.0`), a client would POST to the `events/relations/packages/dependencies` endpoint.

## Aggregates (Query)

Aggregates can be queried to retrieve the current state of an Entity or related Entities after the Event Sourcing backend has reconciled (or folded) all the previous values in time (which is done efficiently through the immutable append-only properties of CouchDB) into a consistent and correct state. This might include dealing with inconsistencies, contradictions (which can arise during the peer-review process) and the propagation of states through inference rules.

# Group Events

## Relation Events [/events/relations]

Relation events are events that express that entities (such as a `Project` and a `Document`) are related.

The following list of Relation Events are currently defined:
 - **ProjectOwnerEvent**: who owns or develops the project.
   - `entity`: `idProject`
   - `attribute`: `relation`
   - `value`: `idOwner`
   - `context`
     - `schema`: `https://...`
 - **OwnerDocumentEvent**: associate a document representing a set of terms or commitments made by the project `Owner`
   - `entity`: `idOwner`
   - `attribute`: `relation`
   - `value`: `idDocument`
 - **ProjectDocumentEvent**: a License document.
   - `entity`: `idProject`
   - `attribute`: `relation`
   - `value`: `idDocument`
 - **ProjectInstanceEvent**: associate a particular OS dependent or Audience dependent instance to a Project.
 - **InstancePackageEvent**: associate a particular version or release to an Instance.

The 2 following events have several possible attributes:
 - **PackageDependency**: associate a `Package` to another `Package`. The following attributes are available:
   - `dependency/static`: For packages that include others in their release artifact.
   - `dependency/dynamic`: For packages that require specific shared packages to be present in the deployment environment.
   - `dependency/requirement`: For packages that require other
 - **InstanceDocumentEvent**

### Add/Retract a Relation Event [POST]

+ Request (application/json)

    + Attributes (Event)

+ Response 201 (application/json)

    + Headers

            Location: /events/relations/

    + Attributes (Event)

## Metrics Events [/events/metrics/]


## Add/Retract a Project Metric [POST]

+ Request (application/json)

    + Attributes (metrics/Projects)


projects/:idProject/metrics
projects/:idProject/owners
projects/:idProject/instances

projects/signal/metrics
projects/signal/owners POST {idOwner: "openwhispersystems"} -> { e: "signal"}

projects/signal/owners/openwhispersystems/metrics POST {legal_name: "O W S, inc."} -> { e: openwhispersystems, a: owners/metrics, v: {} }

## Add/Retract a Onwer Metric [POST]

+ Request (application/json)

    + Attributes (metrics/Owners)

owners/openwhispersystems/metrics POST {legal_name: "O W S, inc."}

projects/signal/instances/signal-android/metrics POST {md5:"blah"}



### Add/Retract a Relation Event [POST]

+ Request (application/json)

    + Attributes (PageContentEvent)

+ Response 201 (application/json)

    + Headers

            Location: /events/

    + Attributes (PageContentEvent)

## Package Events [/events/page/]

### Create a new Package Dependency Event [POST]

+ Request (application/json)

    + Attributes (PackageDependencyEvent)

+ Response 201 (application/json)

    + Headers

            Location: /events/2

    + Attributes (PageContentEvent)

# Group Entities

## Projects Collection [/projects]

### List All Projects [GET]

+ Response 200 (application/json)

    + Attributes (Projects)

### Create a New Project [POST]

You may create a new project using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

    + Attributes (Project)

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Attributes (Project)

## Modify Project [/projects/{project_id}]

### Get Project [GET]

+ Parameters

    + project_id (string) - ID of the Project in the form of a string

+ Request A search limited to one result
    + Parameters
        + project_id: signal

+ Response 200 (application/json)

    + Headers

            Location: /questions/2

    + Attributes (Project)



# Data Structures

# Projects

 - `projects` (array[Project])


## Sample

- `signal` ()
 - `id`: signal
 - `name`: Signal

# Project

> Should inherit from Entity but inheritance seems broken https://github.com/apiaryio/drafter/issues/366

A top level placeholder for a number of software projects that accomplish similar functions and are owned by the same person/organisation.

## Properties

 - `id` (idProject) - Project Identifier
 - `instances` (Instance) - Instance

# idProject (string)

# Instance

> Should inherit from (Entity)

Instance of the project for a particular OS, Audience

## Properties

 - `id` (string) - Instance Identifier

# Package

> Should inherit from (Entity)

[spdx:Package] A Package represents a collection of software files that are delivered as a single functional component.

## Properties

- `id` (idPackage) - Package Identifier

# idPackage (string)

# Repository

> Should inherit from (Entity)

## Properties

- `id` (idRepository) - Repository URI

# idRepository (string)

> Should inherit from (Resource)

# Page (Entity)

A collected web page.

# idPage (string)

# Event

 - `entity` (Entity, required) - Entity
 - `attribute` (Attribute, required) - Attribute
 - `value` (Value, required) - Value
 - `context` (Context, required) - Context

# PageContentEvent

> Should inherit from (Event)

## Properties

 - `entity` (idPage) - Page URL
 - `attribute` (hasPageContent) - has Page Content
 - `value` (Content) - Page Content (in Markdown)
 - `context` (Context) - Metadata

# hasPageContent (object)

> Should inherit from (Property)

## Properties

- `property`: PageContent (string, fixed) - Name of property.
- `type` : propertyCreated (string, fixed) - Type of property

# Content (object)

- `hash` (string) - Checksum of the page
- `content` (string) - Content of the page

# Entity (Resource)

 - `id` (string) - Entity Identifier

# Attribute (Resource)

# Value (Resource)

# Context (Resource)

# Resource (object)

## Properties

 - `id` (string) - Resource Id

# PackageDependencyEvent

> Should inherit from (Event)
>
> [Graph]: `Package.hasDependency` (Package)
>
> Not sure if this should be specialised to `Package`s or if it would make sense to reuse for `Project`s as well (e.g. Zom > ChatSecure > Conversations the latter not having PackageDependencies and only Project)

## Properties

 - `entity` (idPackage) - Package Identifier
 - `attribute` (hasDependency) - hasDependency
 - `value` (idPackage) - Dependent Package Identifier

## Sample

 - `entity`: `signal-android`
 - `attribute`
   - `property`: Dependency
   - `type`: nodeCreated
 - `value`: `openssl`

# hasDependency (object)

> Should inherit from (Graph)
> [spdx:relationshipType_packageOf]

## Properties

- `property`: Dependency (string, fixed) - Dependency
- `type` (array)
  - nodeCreated (string)
  - nodeDeleted (string)
